cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
print(final_df)
print(final_df[,'name']=='Sports')
#Return object
return (final_df)
}
C= get_genre_details()
get_genre_details<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Return Data.Frame with list of games
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
print(final_df)
print(final_df[final_df[,'name']=='Sports'])
#Return object
return (final_df)
}
C= get_genre_details()
get_genre_details<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Return Data.Frame with list of games
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
print(final_df)
print(final_df[final_df[,'name']=='Sports']['id'])
#Return object
return (final_df)
}
C= get_genre_details()
get_genre_details<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Return Data.Frame with list of games
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
print(final_df)
print(final_df[final_df[,'name']=='Sports','id'])
#Return object
return (final_df)
}
C= get_genre_details()
get_genre_details<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Return Data.Frame with list of games
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
given="Sports"
print(final_df)
print(final_df[tolower(final_df[,'name'])==tolower(given),'id'])
#Return object
return (final_df)
}
C= get_genre_details()
View(genres)
View(genres)
?get_game_list
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="1-1-2020",end_date="31-12-2020")
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-1-1",end_date="2020-12-31")
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-01-01",end_date="2020-12-31")
#overview
str(query_1)
View(query_1)
View(query_1)
# Get all the games with ratings between 80 and100
query_2 <- get_game_list(api_key=API_KEY, metacritic="80-100")
str(query_2)
View(query_2)
View(query_2)
View(genres)
View(genres)
library(ggplot2)
# library(RAWG.io.Wrapper)
source("../R/game_genre.R")
source("../R/game_list.R")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
genres %>% ggplot() + aes(x="name", y="games_count") + geom_bar()
as.data.frame(genres) %>% ggplot() + aes(x="name", y="games_count") + geom_bar()
as.data.frame(genres)# %>% ggplot() + aes(x="name", y="games_count") + geom_bar()
as.data.frame(genres) %>% ggplot() + aes(x="name", y="games_count") + geom_bar()
as.data.frame(genres) %>% ggplot() + aes(x="name", y="games_count") + geom_bar(stat="identity")
as.data.frame(genres) %>% ggplot() + aes(x=factor(name), y="games_count") + geom_bar(stat="identity")
as.data.frame(genres) %>% ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) + geom_bar(stat="identity")
as.data.frame(genres) %>%
ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Bar chart of the query result
as.data.frame(genres) %>%
ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres")
ylab("Count of Games")
labs("Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("Count of Games") +
labs("Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("Count of Games") +
labs(title = "Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
mutate(name=as.factor(name), games_count=as.integer(games_count))
View(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
convert(fct(name), int(games_count))
library(ggplot2)
library(dplyr)
# library(RAWG.io.Wrapper)
source("../R/game_genre.R")
source("../R/game_list.R")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
convert(fct(name), int(games_count))
# Bar chart of the query result
as.data.frame(genres) %>%
mutate(as.factor(name), as.integer(games_count))
# ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) +
# geom_bar(stat="identity") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
# xlab("Game Genres") +
# ylab("Count of Games") +
# labs(title = "Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
mutate(name=as.factor(name), games_count=as.integer(games_count))
# ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) +
# geom_bar(stat="identity") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
# xlab("Game Genres") +
# ylab("Count of Games") +
# labs(title = "Number of Games Available per Genre")
library(ggplot2)
library(dplyr)
# library(RAWG.io.Wrapper)
source("../R/game_genre.R")
source("../R/game_list.R")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
mutate(name=as.factor(name), games_count=as.integer(games_count))
# ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) +
# geom_bar(stat="identity") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
# xlab("Game Genres") +
# ylab("Count of Games") +
# labs(title = "Number of Games Available per Genre")
library(ggplot2)
library(dplyr)
# library(RAWG.io.Wrapper)
source("../R/game_genre.R")
source("../R/game_list.R")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count))
# ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) +
# geom_bar(stat="identity") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
# xlab("Game Genres") +
# ylab("Count of Games") +
# labs(title = "Number of Games Available per Genre")
library(ggplot2)
library(dplyr)
# library(RAWG.io.Wrapper)
source("../R/game_genre.R")
source("../R/game_list.R")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
View(genres)
View(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count))
# ggplot() + aes(x=as.factor(name), y=as.integer(games_count)) +
# geom_bar(stat="identity") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
# xlab("Game Genres") +
# ylab("Count of Games") +
# labs(title = "Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("Count of Games") +
labs(title = "Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, games_count, order = F), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("Count of Games") +
labs(title = "Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, games_count, order = T), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("Count of Games") +
labs(title = "Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("Count of Games") +
labs(title = "Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("Count of Games") +
labs(title = "Number of Games Available per Genre")
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Genre")
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-01-01",end_date="2020-12-31")
str(query_1)
View(query_1)
View(query_1)
# Plotting metacritic ratings over the year.
query_1 %>% ggplot() + aes(x=name, y=metacritic)+geom_point()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=name, y=metacritic)+geom_point()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=reorder(name,-metacritic), y=metacritic)+geom_point()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=reorder(name,metacritic), y=metacritic)+geom_point()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=name, y=metacritic)+geom_point()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(y=metacritic)+geom_histogram()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(y=as.integer(metacritic))+geom_histogram()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_histogram()
# Plotting metacritic ratings over the year.
# as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_histogram()
is.null(query_1['metacritic'])
# Plotting metacritic ratings over the year.
# as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_histogram()
query_1['metacritic']
# Plotting metacritic ratings over the year.
# as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_histogram()
query_1[,'metacritic']
# Plotting metacritic ratings over the year.
as.data.frame(drop.na(query_1)) %>% ggplot() + aes(x=as.integer(metacritic))+geom_histogram()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_histogram()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_histogram(bins = 20)
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_histogram(bins = 100)
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_histogram(bins = 30)
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_density()
# Plotting metacritic ratings over the year.
as.data.frame(query_1) %>% ggplot() + aes(x=as.integer(metacritic))+geom_density()
# Plotting average metacritic ratings
as.data.frame(query_1) %>%
ggplot() + aes(x=as.integer(metacritic)) +
geom_density() +
xlab("Metacritic Ratings") +
ylab("Density") +
labs(title = "Density Plot of Reviewer's Metacritic Ratings")
setwd("/home/aamir/Workspace/UBCO/data_534/Labs/Data534-Project-Group8/")
roxygen2::roxygenise()
rm(list = c("get_game_list", "get_genre_list"))
roxygen2::roxygenise()
