source("R/game_genre.R")
source("R/game_genre.R")
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
get_genre_list<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Return Data.Frame with list of games
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
#Return object
return (final_df)
}
get_genre_list()
library(httr)
library(jsonlite)
library(dplyr)
library(tibble)
get_genre_list<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Return Data.Frame with list of games
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
#Return object
return (final_df)
}
get_genre_list()
get_genre_list(api_key = "bb91c5797154447483ea1dda3f17574e")
cleaned_api_key <- paste("?key=",api_key,sep="")
get_genre_list<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Return Data.Frame with list of games
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
#Return object
return (final_df)
}
get_genre_list(api_key = "bb91c5797154447483ea1dda3f17574e")
get_genre_list<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Return Data.Frame with list of games
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
print(link)
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
#Return object
return (final_df)
}
get_genre_list(api_key = "bb91c5797154447483ea1dda3f17574e")
get_genre_list<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Return Data.Frame with list of games
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",cleaned_api_key,sep="")
print(link)
get_link <- GET(link) #GET REQUEST
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
#Return object
return (final_df)
}
get_genre_list(api_key = "bb91c5797154447483ea1dda3f17574e")
source("R/game_genre.R")
abort
source("R/game_genre.R")
source("game_genre.R")
source("game_genre.R")
get_genre_list()
source("game_list.R")
x <- get_game_list()
View(get_genre_list)
View(get_game_list)
View(x)
x <- get_game_list(n=5,api_key="bb91c5797154447483ea1dda3f17574e")
View(x)
View(x)
x <- get_game_list(n=5,api_key="bb91c5797154447483ea1dda3f17574e",sort="name")
x <- get_game_list(n=5,api_key="bb91c5797154447483ea1dda3f17574e",sort="names")
?get_game_list
x <- get_game_list(n=5,api_key="bb91c5797154447483ea1dda3f17574e",ordering="name")
View(x)
View(x)
