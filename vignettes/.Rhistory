stop("Please double check the inputted parameters (i.e. make sure your API is correct")
}
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
final_df<-data.frame(final_df)
#Return object
return (final_df)
}
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
source('~/Workspace/UBCO/data_534/Labs/Data534-Project-Group8/R/get_genre_list.R')
if (TRUE %in% grepl("&|%",api_key)){
stop("Please do not try to mess with the GET request.")
}
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",cleaned_api_key,sep="")
get_link <- GET(link) #GET REQUEST
#Check if it is a successful connection
if (get_link$status_code != 200){
stop("Please double check the inputted parameters (i.e. make sure your API is correct")
}
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
final_df<-data.frame(final_df)
#Return object
return (final_df)
if (TRUE %in% grepl("&|%",api_key)){
stop("Please do not try to mess with the GET request.")
}
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",cleaned_api_key,sep="")
get_link <- GET(link) #GET REQUEST
#Check if it is a successful connection
if (get_link$status_code != 200){
stop("Please double check the inputted parameters (i.e. make sure your API is correct")
}
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
final_df<-data.frame(final_df)
api_key=""
if (TRUE %in% grepl("&|%",api_key)){
stop("Please do not try to mess with the GET request.")
}
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",cleaned_api_key,sep="")
get_link <- GET(link) #GET REQUEST
#Check if it is a successful connection
if (get_link$status_code != 200){
stop("Please double check the inputted parameters (i.e. make sure your API is correct")
}
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
final_df<-data.frame(final_df)
if (TRUE %in% grepl("&|%",api_key)){
stop("Please do not try to mess with the GET request.")
}
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",cleaned_api_key,sep="")
get_link <- GET(link) #GET REQUEST
#Check if it is a successful connection
if (get_link$status_code != 200){
stop("Please double check the inputted parameters (i.e. make sure your API is correct")
}
raw_content <- fromJSON(content(get_link,"text",encoding="UTF-8"),simplifyVector=FALSE) #FORMAT INTO JSON
results <- (raw_content$results)
#Cleaning and Formatting
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
final_df<-data.frame(final_df)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
library(MASS)
library(mgcv)
library(httr)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(devtools)
install_github("Conrad-Yeung/RAWG.io.Wrapper", force=T)
library(RAWG.io.Wrapper)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
library(MASS)
library(mgcv)
library(httr)
library(jsonlite)
library(tibble)
library(ggplot2)
library(dplyr)
library(devtools)
install_github("Conrad-Yeung/RAWG.io.Wrapper", force=T)
library(RAWG.io.Wrapper)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Genre")
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-01-01",end_date="2020-12-31")
str(query_1)
# Get all the games with ratings between 80 and100
query_2 <- get_game_list(api_key=API_KEY, metacritic="80-100")
str(query_2)
# Plotting average metacritic ratings
as.data.frame(query_1) %>%
ggplot() + aes(x=as.integer(metacritic)) +
geom_density() +
xlab("Metacritic Ratings") +
ylab("Density") +
labs(title = "Density Plot of Reviewer's Metacritic Ratings")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all publisher with some stats
publishers <- get_publisher_list(API_KEY)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all publisher with some stats
publishers <- get_publisher_list(API_KEY)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all publisher with some stats
publishers <- get_publisher_list(API_KEY)
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-01-01",end_date="2020-12-31")
str(query_1)
library(MASS)
library(mgcv)
library(httr)
library(jsonlite)
library(tibble)
library(ggplot2)
library(dplyr)
library(devtools)
install_github("Conrad-Yeung/RAWG.io.Wrapper")
library(RAWG.io.Wrapper)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Genre")
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-01-01",end_date="2020-12-31")
str(query_1)
# Get all the games with ratings between 80 and100
query_2 <- get_game_list(api_key=API_KEY, metacritic="80-100")
str(query_2)
# Plotting average metacritic ratings
as.data.frame(query_1) %>%
ggplot() + aes(x=as.integer(metacritic)) +
geom_density() +
xlab("Metacritic Ratings") +
ylab("Density") +
labs(title = "Density Plot of Reviewer's Metacritic Ratings")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all publisher with some stats
publishers <- get_publisher_list(API_KEY)
library(MASS)
library(mgcv)
library(httr)
library(jsonlite)
library(tibble)
library(ggplot2)
library(dplyr)
library(devtools)
install_github("Conrad-Yeung/RAWG.io.Wrapper")
library(RAWG.io.Wrapper)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Genre")
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-01-01",end_date="2020-12-31")
str(query_1)
# Get all the games with ratings between 80 and100
query_2 <- get_game_list(api_key=API_KEY, metacritic="80-100")
str(query_2)
# Plotting average metacritic ratings
as.data.frame(query_1) %>%
ggplot() + aes(x=as.integer(metacritic)) +
geom_density() +
xlab("Metacritic Ratings") +
ylab("Density") +
labs(title = "Density Plot of Reviewer's Metacritic Ratings")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all publisher with some stats
publishers <- get_publisher_list(API_KEY)
get_publisher_list
library(MASS)
library(mgcv)
library(httr)
library(jsonlite)
library(tibble)
library(ggplot2)
library(dplyr)
library(devtools)
install_github("Conrad-Yeung/RAWG.io.Wrapper")
library(RAWG.io.Wrapper)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Genre")
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-01-01",end_date="2020-12-31")
str(query_1)
# Get all the games with ratings between 80 and100
query_2 <- get_game_list(api_key=API_KEY, metacritic="80-100")
str(query_2)
# Plotting average metacritic ratings
as.data.frame(query_1) %>%
ggplot() + aes(x=as.integer(metacritic)) +
geom_density() +
xlab("Metacritic Ratings") +
ylab("Density") +
labs(title = "Density Plot of Reviewer's Metacritic Ratings")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
get_publisher_list(API_KEY)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all publisher with some stats
publishers <- get_publisher_list(API_KEY)
# Overview
str(publishers)
# Bar chart of the query result
as.data.frame(publishers) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Publishers") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Publisher")
unlink('Introduction_cache', recursive = TRUE)
library(knitr)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
# Bar chart of the query result
as.data.frame(publishers) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Publishers") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Publisher")
library(MASS)
library(mgcv)
library(httr)
library(jsonlite)
library(tibble)
library(ggplot2)
library(dplyr)
library(devtools)
install_github("Conrad-Yeung/RAWG.io.Wrapper")
library(RAWG.io.Wrapper)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Genre")
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-01-01",end_date="2020-12-31")
str(query_1)
# Get all the games with ratings between 80 and100
query_2 <- get_game_list(api_key=API_KEY, metacritic="80-100")
str(query_2)
# Plotting average metacritic ratings
as.data.frame(query_1) %>%
ggplot() + aes(x=as.integer(metacritic)) +
geom_density() +
xlab("Metacritic Ratings") +
ylab("Density") +
labs(title = "Density Plot of Reviewer's Metacritic Ratings")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all publisher with some stats
publishers <- get_publisher_list(API_KEY)
# Overview
str(publishers)
# Bar chart of the query result
as.data.frame(publishers) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Publishers") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Publisher")
library(MASS)
library(mgcv)
library(httr)
library(jsonlite)
library(tibble)
library(ggplot2)
library(dplyr)
library(devtools)
install_github("Conrad-Yeung/RAWG.io.Wrapper")
library(RAWG.io.Wrapper)
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all genres with some stats
genres <- get_genre_list(API_KEY)
# Overview
str(genres)
# Bar chart of the query result
as.data.frame(genres) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Genres") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Genre")
# Get all the games released in the year 2020
query_1 <- get_game_list(api_key=API_KEY,start_date="2020-01-01",end_date="2020-12-31")
str(query_1)
# Get all the games with ratings between 80 and100
query_2 <- get_game_list(api_key=API_KEY, metacritic="80-100")
str(query_2)
# Plotting average metacritic ratings
as.data.frame(query_1) %>%
ggplot() + aes(x=as.integer(metacritic)) +
geom_density() +
xlab("Metacritic Ratings") +
ylab("Density") +
labs(title = "Density Plot of Reviewer's Metacritic Ratings")
API_KEY = "95731a37dcf84a638308f6f40fb01801"    # Get you API from RAWG
# Get a list of all publisher with some stats
publishers <- get_publisher_list(API_KEY)
# Overview
str(publishers)
# Bar chart of the query result
as.data.frame(publishers) %>%
transform(name=as.factor(name), games_count=as.integer(games_count)) %>%
ggplot() + aes(x=reorder(name, -games_count), y=games_count) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Game Publishers") +
ylab("No. of Games") +
labs(title = "Number of Games Available per Publisher")
knit_with_parameters('~/Workspace/UBCO/data_534/Labs/Data534-Project-Group8/vignettes/Introduction.Rmd')
